function [Y,Xf,Af] = rnn_created_Fnc(X,Xi,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 12-Jun-2018 11:58:02.
%
% [Y,Xf,Af] = myNeuralNetworkFunction(X,Xi,~) takes these arguments:
%
%   X = 2xTS cell, 2 inputs over TS timesteps
%   Each X{1,ts} = 6xQ matrix, input #1 at timestep ts.
%   Each X{2,ts} = 4xQ matrix, input #2 at timestep ts.
%
%   Xi = 2x2 cell 2, initial 2 input delay states.
%   Each Xi{1,ts} = 6xQ matrix, initial states for input #1.
%   Each Xi{2,ts} = 4xQ matrix, initial states for input #2.
%
%   Ai = 2x0 cell 2, initial 2 layer delay states.
%   Each Ai{1,ts} = 10xQ matrix, initial states for layer #1.
%   Each Ai{2,ts} = 4xQ matrix, initial states for layer #2.
%
% and returns:
%   Y = 1xTS cell of 2 outputs over TS timesteps.
%   Each Y{1,ts} = 4xQ matrix, output #1 at timestep ts.
%
%   Xf = 2x2 cell 2, final 2 input delay states.
%   Each Xf{1,ts} = 6xQ matrix, final states for input #1.
%   Each Xf{2,ts} = 4xQ matrix, final states for input #2.
%
%   Af = 2x0 cell 2, final 0 layer delay states.
%   Each Af{1ts} = 10xQ matrix, final states for layer #1.
%   Each Af{2ts} = 4xQ matrix, final states for layer #2.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0;0;0;0;0;0];
x1_step1.gain = [2.73972602739726;5.4054054054054;1.98019801980198;1.6260162601626;1.63934426229508;3.50877192982456];
x1_step1.ymin = -1;

% Input 2
x2_step1.xoffset = [-0.872574;-0.679394;-0.556332;-0.992793];
x2_step1.gain = [1.07103477489259;1.56828427348055;1.62624631451929;1.23231322444614];
x2_step1.ymin = -1;

% Layer 1
b1 = [-2.1455441810622915;-0.65563753460747242752;0.18866041283711548759;-0.034602713842845973791;-0.021822929433715228253;0.096471060704610978043;0.22317753941609486112;-0.059319376490721317796;-1.4329791901512141106;1.5734770347854554196];
IW1_1 = [0.39097494680398492406 -0.058404055638009474971 0.22243897051932967623 -0.012019680802865398764 -0.084742822133595380185 0.1245367917387639467 -0.016049959273690881517 0.21780743805468846808 -0.41061171317869471498 -0.34835969564011970423 0.11587845823124147404 -0.17253367735062144495;0.22120475182660076507 -0.40464216752998499738 -0.1201643983118441672 -0.17951977252919609773 0.051453628631027162332 -0.43260624400621627839 -0.2323305180950563098 0.39491648183846383979 0.10982479893520791236 0.19292607589302573912 -0.03123497342287340911 0.45152908209192671452;0.0010631765218721835834 0.19330061928355851686 0.0650736910101864241 0.20010666606140681267 0.17527844364127975751 0.029625968974646400833 0.049641888423307342637 -0.15828061127323164725 -0.020723454847513977928 -0.25572514808567442524 -0.21387404392766376504 -0.019856928008953219494;-0.034214579986009803492 0.35732138737798030403 0.09973484984463605596 0.21840910150180997684 0.10107162609613538906 0.050757928165973527357 0.082966661811148506578 -0.31450751783190061817 -0.044236353933520308757 -0.25950111873265147011 -0.17185696950828993623 -0.055761021691406439937;0.11683172708268262097 -0.1289153852330240102 0.026055379894626969767 -0.049696260590496310616 0.13259983371746925096 -0.041556132696400703563 -0.085820565980782179127 0.13448847443373815325 -0.0209498647082557235 0.0082820466992702852782 -0.10251213922941103396 0.057267227362360381693;0.081262505689063291303 -0.22990697744493759913 0.060298994903132903389 -0.095380140800507023924 0.17761570865697981492 -0.02810450206911721191 -0.058399093264921771163 0.22335639963656772622 -0.072571709972908585162 0.045921658189170835862 -0.10128178998891175511 0.056718189467002605442;0.18231329401625859243 -0.25445985934805093187 -0.051873703274391898266 -0.058774278961824126533 0.11457495521971379493 -0.15695901734943054628 -0.17652570681266213648 0.25002350275203233387 0.052750672116997389394 0.041576320130411882625 -0.072999760218778644849 0.16915563684828560653;-0.013432345494866408317 -0.0012671494532421430021 0.039069998798201319157 0.014829714757449524026 0.040683185666204720043 0.13397565601426070225 0.020917049074225826932 -0.0022049664958720461595 -0.046317467887087668266 -0.032235025690094405715 -0.012249043616809252369 -0.1300949970613165807;-0.29474433627966067917 -0.14316925594289051094 -0.29771766641676272735 0.20307602835831306543 -0.12491920079389418063 -0.27442462732567463046 0.19444490691366619894 0.11281521090465404522 0.19022371716945182807 -0.0080077919313892177017 -0.055261658922261321092 0.36811923900920201502;0.0039405556707045943932 0.1206869865712940082 -0.094679231511768879859 0.30798798685478034898 0.07310701104204267442 0.27580256080712572953 -0.023761210125546682048 -0.11441581919718829541 0.11017259291061572146 -0.30023987430403009657 -0.097382964260875323759 -0.29262654888404604492];
IW1_2 = [-0.19303972349192097258 0.47048718868860239795 0.23475403345521159149 0.37860547568261809781 -0.033819835140379742033 -0.45996368916076380007 0.24212392191038270561 -0.44132559172696234073;-0.3503435440169017645 0.025153552796862186508 0.40673778775305646782 0.29326473445559053665 0.086606102199617410187 0.036770146790479532606 -0.38470699718690803959 -0.072074428494297113068;-0.12333982758726505513 0.4115235605029274879 0.29989761127651132222 -0.65353150477291310771 -0.13384823621269831273 -0.2264938703870380543 -0.30556024405400811217 0.46578155147554145543;0.084561304486001478975 -0.28290509489011983479 0.67541698488734780437 0.19823036469991039965 -0.10013383150112853404 0.12325941047636036763 -0.3943688565717128891 0.16286922287595925751;0.084527606195352683605 -0.086509279039051950599 -0.44274142553349166151 0.58278604405025635771 -0.16185736290467891973 -0.13134953355248016327 0.034441318398242715126 -0.13735376072280280901;-0.57566140537211174522 -0.30866951789454627475 0.82851386554449413246 0.16033382728425271679 0.16083305231315411787 -0.13983334517895085192 -0.36383221596271014819 -0.11422790213192973718;0.73123453051950770831 -0.19381591036200476741 0.12678964729872746475 0.096318954682218710373 -0.22737517851950247993 0.018628654291651169927 -0.13136115288891825337 0.0087895365244645765057;-0.02568763616929105667 0.43013780548813029814 0.21243164142238271652 0.32681744826837438866 0.046796261228515032005 -0.14112586488633976911 -0.025852723673922297504 -0.15319273083936507662;-0.25413509472081247109 0.11809411643956047033 0.19411920522726852645 0.37241314286741317163 -0.39572199867004259621 -0.029663970477153064897 -0.11348394753552054626 -0.062479407579508719484;-0.38535492189767411864 -0.34810233250853633846 0.038715229015137797575 0.063990038793005632467 -0.23265454014380540504 0.60716623775982747624 -0.065848407266802230775 -0.17638035440360080863];

% Layer 2
b2 = [0.68038378327051540762;0.72087370329967237481;0.70006067285262696398;0.048144139006151477622];
LW2_1 = [0.34876801608136454025 -0.70479733789442866598 -0.072801846327897268285 0.0853813016702785893 -0.27201919524031969999 -0.41580683653432348734 1.3345186478653328077 0.23457530143513538601 0.1758711217148699324 -0.88892691896983111466;0.054832916393542020794 0.85417564849120486414 0.62915764686216490986 -0.365427944226681789 -0.26157453205773528726 -0.68752239136905290984 -0.24457801440348550526 1.6801132184326657004 -0.24030803373554343594 -0.35447588568654930796;0.29066970946039505375 0.56831828062806666324 -0.35168022262311465775 0.68836209045951979313 -1.1786520339035837512 0.51009251912067166135 0.21743771448787280187 0.56154835384006684951 -0.057985040603640389256 -0.16501292548120505277;-0.41943950056261125603 0.38020657278236852372 -0.94681029041143927039 0.80876862902056767535 0.80974351748861794764 -0.20085827724480320722 -0.2584469289035247197 1.0668176826888229325 0.3071225737172029735 0.41842098309220077113];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [1.07103477489259;1.56828427348055;1.62624631451929;1.23231322444614];
y1_step1.xoffset = [-0.872574;-0.679394;-0.556332;-0.992793];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end
if (nargin < 2), error('Initial input states Xi argument needed.'); end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},2); % samples/series
elseif ~isempty(Xi)
    Q = size(Xi{1},2);
else
    Q = 0;
end

% Input 1 Delay States
Xd1 = cell(1,3);
for ts=1:2
    Xd1{ts} = mapminmax_apply(Xi{1,ts},x1_step1);
end

% Input 2 Delay States
Xd2 = cell(1,3);
for ts=1:2
    Xd2{ts} = mapminmax_apply(Xi{2,ts},x2_step1);
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Rotating delay state position
    xdts = mod(ts+1,3)+1;
    
    % Input 1
    Xd1{xdts} = mapminmax_apply(X{1,ts},x1_step1);
    
    % Input 2
    Xd2{xdts} = mapminmax_apply(X{2,ts},x2_step1);
    
    % Layer 1
    tapdelay1 = cat(1,Xd1{mod(xdts-[1 2]-1,3)+1});
    tapdelay2 = cat(1,Xd2{mod(xdts-[1 2]-1,3)+1});
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*tapdelay1 + IW1_2*tapdelay2);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
finalxts = TS+(1: 2);
xits = finalxts(finalxts<=2);
xts = finalxts(finalxts>2)-2;
Xf = [Xi(:,xits) X(:,xts)];
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
