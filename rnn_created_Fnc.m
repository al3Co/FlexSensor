function [Y,Xf,Af] = rnn_created_Fnc(X,Xi,~)
%RNN_CREATED_FNC neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 06-Jun-2018 16:31:42.
% 
% [Y,Xf,Af] = rnn_created_Fnc(X,Xi,~) takes these arguments:
% 
%   X = 2xTS cell, 2 inputs over TS timesteps
%   Each X{1,ts} = 6xQ matrix, input #1 at timestep ts.
%   Each X{2,ts} = 4xQ matrix, input #2 at timestep ts.
% 
%   Xi = 2x1 cell 2, initial 1 input delay states.
%   Each Xi{1,ts} = 6xQ matrix, initial states for input #1.
%   Each Xi{2,ts} = 4xQ matrix, initial states for input #2.
% 
%   Ai = 2x0 cell 2, initial 1 layer delay states.
%   Each Ai{1,ts} = 10xQ matrix, initial states for layer #1.
%   Each Ai{2,ts} = 4xQ matrix, initial states for layer #2.
% 
% and returns:
%   Y = 1xTS cell of 2 outputs over TS timesteps.
%   Each Y{1,ts} = 4xQ matrix, output #1 at timestep ts.
% 
%   Xf = 2x1 cell 2, final 1 input delay states.
%   Each Xf{1,ts} = 6xQ matrix, final states for input #1.
%   Each Xf{2,ts} = 4xQ matrix, final states for input #2.
% 
%   Af = 2x0 cell 2, final 0 layer delay states.
%   Each Af{1ts} = 10xQ matrix, final states for layer #1.
%   Each Af{2ts} = 4xQ matrix, final states for layer #2.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0;0;0;0;0;0];
x1_step1.gain = [3.7037037037037;5;2.7027027027027;2.8169014084507;4.65116279069768;5.88235294117647];
x1_step1.ymin = -1;

% Input 2
x2_step1.xoffset = [-0.601061;-0.78758;-0.390241;-0.838936];
x2_step1.gain = [1.50063176597347;2.33322678264359;1.84940652544598;4.40545130544536];
x2_step1.ymin = -1;

% Layer 1
b1 = [-1.3285529919263086018;0.86688914483384371668;-0.10522429470040564614;0.024575593898572854756;-0.13828078757272732613;-0.099901553800879366873;0.90690887649297668993;0.98163940963513141025;-0.33489487362951919636;0.064156850707470042261];
IW1_1 = [0.3879091097738784355 0.34524558577963637696 0.27936563693191529545 0.2602795390939453557 -0.23149369568141067721 -0.17214112270138051675;0.3914201431434665146 0.20279767063416012651 0.11666543082001995524 -0.15540110332231335533 0.011808667714812048216 -0.15364180994234349908;0.022558008085069466281 0.095805303548051057305 0.012771499087841595502 0.13714070136036907166 -0.081701586986458241135 0.035351331849843868615;-0.022098968087626728873 -0.10799931069900234326 -0.018879830248601188469 -0.17004709997324388149 0.096516893266168232723 -0.041795830821570928437;0.047179825034094902136 0.070832516363492623035 0.03391884508152536587 0.086532967481418213151 -0.049695017060248175556 0.0040070155312735130856;-0.026056608371554604991 -0.084862031356476533284 -0.011947584577055797919 -0.10834255177305834872 0.06879804906365548367 -0.027665162381097323924;-0.61533635347745041511 -0.43989677177992708712 -0.72807138601834309188 -0.3236098490673987027 0.6582736596460059264 0.41842127829082476076;-0.32204400851368558678 -0.27974341846517442045 -0.21800741689715899541 -0.1701911638051152309 0.17468161125281725377 0.1265495761294916921;-0.089520109881816106734 -0.43205653278776839921 0.50386324731205245353 0.63768874363937833039 0.17336762023721824511 -0.23978866741195539736;0.021394437046925510876 0.070975195173219929323 0.017941068705070648687 0.10760857031767762093 -0.060496937557672061936 0.024197186817988436403];
IW1_2 = [-0.85778629046948373649 -0.26427421797539007997 0.025527844068274987283 -0.35785626059672376309;-0.37823509182656728234 -0.34694675383359013798 -0.049016988217353868462 -0.3095174251324525061;0.040152311437192500509 -0.15291636379950146463 0.19899797863990661972 0.1131712502498469497;-0.0076215700223566515067 0.093659351765038020843 -0.043365109759570821812 -0.13799718925752391119;-0.26227204485703825565 -0.062888955752469277716 0.0021472045105685550956 -0.021807135249068285154;-0.030416615412846879224 -0.038394426343094208154 0.011122836643792674213 -0.017092363626837546453;1.618807462491523852 0.52042370014271477352 -0.13744784490078343353 0.715547810567568221;0.66054658773176699871 0.25533420309518739533 -0.034813453086641757417 0.30329178098392600704;-0.23622755190396085845 -0.27025254582352781219 0.35886536289573406355 -0.048840156250405254712;-0.10526970914858715944 -0.034159324261660233002 -0.053897947626332411153 -0.090588187502118763805];

% Layer 2
b2 = [-0.64503318449490243403;-0.34167522074086870143;0.49942477286097664013;0.52169788717121179378];
LW2_1 = [-0.92538217412547008056 0.3379281302235725426 -0.14981881024724152951 -1.395526962088915246 -5.5961032186422015045 -0.44840874662767943315 0.06245076544155015591 -1.680151417316175344 0.077783957056954872167 1.2227078663293329264;0.93379035742256610853 -0.43045324641532622945 0.40942423935498106768 5.9990360533807507437 4.6173853139285618852 -10.418732470274056467 -0.071350351627967989465 1.7886229781904559033 0.089806589310157919348 -5.438413659898366781;0.56090535293221288615 -0.3180303809516925595 6.2588946573321351252 8.0439597666263509268 3.2653395744491682251 -4.5535839606454286965 -0.054349899372656995666 1.1688814269798217804 0.080089763839916658372 -2.7062256596553737609;-0.049672387067698955954 -0.020839263826352510955 -2.9246176586838021905 -5.6496592749686147528 2.5427789458278136081 0.43912553360560285798 0.0045890080660460127321 0.093698570742918915744 -0.042125637333782141314 -6.4839250370792802514];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [1.50063176597347;2.33322678264359;1.84940652544598;4.40545130544536];
y1_step1.xoffset = [-0.601061;-0.78758;-0.390241;-0.838936];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end
if (nargin < 2), error('Initial input states Xi argument needed.'); end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
elseif ~isempty(Xi)
  Q = size(Xi{1},2);
else
  Q = 0;
end

% Input 1 Delay States
Xd1 = cell(1,2);
for ts=1:1
    Xd1{ts} = mapminmax_apply(Xi{1,ts},x1_step1);
end

% Input 2 Delay States
Xd2 = cell(1,2);
for ts=1:1
    Xd2{ts} = mapminmax_apply(Xi{2,ts},x2_step1);
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

      % Rotating delay state position
      xdts = mod(ts+0,2)+1;
    
    % Input 1
    Xd1{xdts} = mapminmax_apply(X{1,ts},x1_step1);
    
    % Input 2
    Xd2{xdts} = mapminmax_apply(X{2,ts},x2_step1);
    
    % Layer 1
    tapdelay1 = cat(1,Xd1{mod(xdts-1-1,2)+1});
    tapdelay2 = cat(1,Xd2{mod(xdts-1-1,2)+1});
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*tapdelay1 + IW1_2*tapdelay2);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
finalxts = TS+(1: 1);
xits = finalxts(finalxts<=1);
xts = finalxts(finalxts>1)-1;
Xf = [Xi(:,xits) X(:,xts)];
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
